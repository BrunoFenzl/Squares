////
/// @author Bruno Fenzl
////

/// Namespace your classes as you like.
$ns: 'prop';

/// Set of proportions to generate. Defaults to an opionated list of default proportions.
/// Fell free to change these.
$proportions: (
	'1x1': 	(1, 1),
	'2x1': 	(2, 1),
	'3x1': 	(3, 1),
	'4x1': 	(4, 1),
	'1x2': 	(1, 2),
	'4x3': 	(4, 3),
	'3x4': 	(3, 4),
	'3x2':	(3, 2),
	'2x3':	(2, 3),
	'5x2': 	(5, 2), 
	'5x3': 	(5, 3),
	'16x9':	(16, 9)
);

/// Breakpoints where to apply different proportions. 
/// Classes will be generated within these media queries
$grid-breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px
) !default;

/// Set the vertical and horizontal spacing between elements.
$base-gutter: 1rem!default;

/// If true, will display an overlay with the name of the current proportion.
$debug: false !important;

// Default styles for proportional elements
%base-prop{
	position: relative;
	width: 100%!important;
	height: 0;
	padding-top:0;
	padding-right:0;
	padding-bottom:0;
	padding-left:0;
}

// Default styles for inner container
%inner{
	position: absolute;
	overflow: hidden;
}

/// Mixin for reseting block height and make it auto
@mixin reset-props() {
	height: auto;
	padding-top:$base-gutter/2;
	padding-right:$base-gutter/2;
	padding-bottom:$base-gutter/2;
	padding-left:$base-gutter/2;
	
	.#{$ns}-inner{
		position: static;
		top: auto;
		right: auto;
		bottom: auto;
		left: auto;
	}
}

/// Common properties for all squares
/// @output basic properties for a square
/// @example css
/// .foo{
/// 	@include make-base-prop();
/// }
/// outputs:
/// .foo{
/// 	position: relative;
/// 	width: 100%!important;
/// 	height: 0;
/// }
@mixin make-base-prop() {
	@extend %base-prop;
}

/// @parameter $gutters [$base-gutter] – Set the spacing between elements
@mixin make-inner($gutters: $base-gutter) {
	
	@extend %inner;
	top: $gutters/2;
	right: $gutters/2;
	bottom: $gutters/2;
	left: $gutters/2;
}

/// Generate the proportions specific for a block
/// @parameter {Number} $width – Used to calculate the proportion
/// @parameter {Number} $height – Used to calculate the proportion
/// @parameter $gutters – override global gutters for specific elements
/// @output The padding-bottom property proportional to the element's width
/// @example css
/// .foo{
///		@include make-prop(3, 2); // width, height
/// }
/// outputs:
/// .foo{
///		padding-bottom: 0.6666666667%; // 2/3
/// }
@mixin make-prop($width, $height, $gutters: null) {
	padding-bottom: percentage($height / $width);

	@if ($debug) {
		.#{$ns}-inner{
			display: flex;
			justify-content: center;
			align-items: center;

			&::after{
				content: '#{$width}x#{$height}';
				position: relative;
				z-index: 10;
				display: block;
			}
		}
	}
	// override gutter width for this specific proportion
	@if ($gutters != null) {
		@include make-inner($gutters);
	}
}

/// Find the width of given breakpoint key and return it or null if width == 0.
/// Taken from Bootstrap 4
/// @param {String} $name - Name of the breakpoint. should be defined the $grid-breakpoints map.
/// @param {Map} $bps - Map of Breakpoint names and widths. Defaults to $grid-breakpoints.
/// @return {Number || Null} Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function mq-min($name, $bps: $grid-breakpoints) {
	$min: map-get($bps, $name);
	@return if($min != 0, $min, null);
}


/// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
/// Makes the @content apply to the given breakpoint and wider.
/// Taken from Bootstrap 4
/// @param {String} $name - Name of the breakpoint. should be defined the $grid-breakpoints map.
/// @param {Map} $bps - Map of Breakpoint names and widths. Defaults to $grid-breakpoints.
/// @output Content of the mixin. 
@mixin mq-up($name, $bps: $grid-breakpoints) {
	$min: mq-min($name, $bps);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

/// Loop through all breakpoints and proportions and generate responsive classes
/// @param {Map} $props - Map of all poportions to generate
/// @param {Map} $bps - Map of all breakpoints
@mixin make-props($props: $proportions, $bps: $grid-breakpoints) {
	
	.#{$ns}-inner{
		@include make-inner();
	}

	@each $breakpoint in map-keys($bps) {
		
		// Generate the basic styles for all squares.
		@each $prop in map-keys($props) {

			$values: map-get($props, $prop);
			$w: nth($values, 1); // first value
			$h: nth($values, 2); // second value

			.#{$ns}-#{$breakpoint}-#{$w}x#{$h} {
				@extend %base-prop;
			}
		}
		
		@include mq-up($breakpoint, $bps) {

			// Generate reset classes for all breakpoints
			.#{$ns}-#{$breakpoint}-reset{
				@include reset-props();
			}

			@each $prop in map-keys($props) {
				
				$values: map-get($props, $prop);

				$w: nth($values, 1); // first value
				$h: nth($values, 2); // second value
				
				.#{$ns}-#{$breakpoint}-#{$w}x#{$h} {
					@include make-prop($w, $h);
				}
			}
		}
	}
}

@include make-props();
